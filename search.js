window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pynarrative", "modulename": "pynarrative", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story", "modulename": "pynarrative", "qualname": "Story", "kind": "class", "doc": "<p>Story class: Implements a structure for creating narrative views of data.</p>\n\n<p>This class extends the functionality of Altair to include narrative elements\nsuch as titles, contexts, call-to-action and annotations. It is designed to facilitate\nthe creation of more engaging and informative data visualisations.</p>\n"}, {"fullname": "pynarrative.Story.__init__", "modulename": "pynarrative", "qualname": "Story.__init__", "kind": "function", "doc": "<p>Initialise a Story object.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data: DataFrame or URL for graph data  (default: None)</li>\n<li>width: Graph width in pixels (default: 600)</li>\n<li>height: Height of the graph in pixels (default: 400)</li>\n<li>font: Font to be used for all text elements (default: 'Arial')</li>\n<li>base_font_size: Basic font size in pixels (default: 16)</li>\n<li>**kwargs: Additional parameters to be passed to the constructor of alt.Chart</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"o\">=</span><span class=\"s1\">&#39;Arial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">base_font_size</span><span class=\"o\">=</span><span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pynarrative.Story.chart", "modulename": "pynarrative", "qualname": "Story.chart", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.font", "modulename": "pynarrative", "qualname": "Story.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.base_font_size", "modulename": "pynarrative", "qualname": "Story.base_font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.story_layers", "modulename": "pynarrative", "qualname": "Story.story_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.font_sizes", "modulename": "pynarrative", "qualname": "Story.font_sizes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.colors", "modulename": "pynarrative", "qualname": "Story.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.config", "modulename": "pynarrative", "qualname": "Story.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.Story.add_title", "modulename": "pynarrative", "qualname": "Story.add_title", "kind": "function", "doc": "<p>Adds a title layer (and optional subtitle) to the story.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>title: Main title text</li>\n<li>subtitle: Subtitle text (optional)</li>\n<li>title_color: Custom colour for the title (optional)</li>\n<li>subtitle_color: Custom colour for the subtitle (optional)</li>\n</ul>\n\n<p>returns:</p>\n\n<ul>\n<li>self, to allow method chaining</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">subtitle</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">title_color</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">subtitle_color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.add_context", "modulename": "pynarrative", "qualname": "Story.add_context", "kind": "function", "doc": "<p>Adds a context layer to the story.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>text: The context text to be added</li>\n<li>position: The position of the text (default: \u2018left\u2019)</li>\n<li>colour: Custom text colour (optional)</li>\n</ul>\n\n<p>returns:</p>\n\n<ul>\n<li>self, to allow method chaining</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.add_next_step", "modulename": "pynarrative", "qualname": "Story.add_next_step", "kind": "function", "doc": "<p>Adds a next-step element to the visualisation with multiple customisation options.\nSupports the use of NextStep with any parameter name via kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"o\">=</span><span class=\"s1\">&#39;bottom&#39;</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;What can we do next?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stairs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_family</span><span class=\"o\">=</span><span class=\"s1\">&#39;Arial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">texts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button_width</span><span class=\"o\">=</span><span class=\"mi\">120</span>,</span><span class=\"param\">\t<span class=\"n\">button_height</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">button_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">button_opacity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">button_corner_radius</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">button_text_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">button_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_rect_width</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_rect_height</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_space</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_chart_width</span><span class=\"o\">=</span><span class=\"mi\">700</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_chart_height</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_opacity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_text_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_rect_width</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_rect_height</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_chart_width</span><span class=\"o\">=</span><span class=\"mi\">700</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_chart_height</span><span class=\"o\">=</span><span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_opacity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_text_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.add_annotation", "modulename": "pynarrative", "qualname": "Story.add_annotation", "kind": "function", "doc": "<p>Create an arrow annotation on the graph.</p>\n\n<p>This method is essential for highlighting specific points in the graph and adding\ncontextual explanations. It is particularly useful for data narration, allowing\nto guide the observer's attention to relevant aspects of the visualisation.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x_point, y_point: Coordinates of the point to be annotated</li>\n<li>annotation_text: Text of the annotation (default: \u2018Point of interest\u2019)</li>\n<li>arrow_direction: Direction of the arrow (default: \u2018right\u2019)</li>\n<li>arrow_color, arrow_size: Arrow colour and size</li>\n<li>label_colour, label_size: Colour and size of the annotation text</li>\n<li>show_point: If True, shows a point at the annotation location</li>\n<li>point_color, point_size: Colour and size of the point</li>\n<li>arrow_dx, arrow_dy: Distances in pixels to be added to the arrow position (default:0, -45)</li>\n<li>label_dx, label_dy: Distances in pixels to be added to the label position (default:37, -37)</li>\n</ul>\n\n<p>returns:</p>\n\n<ul>\n<li>self, to allow method chaining</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_point</span>,</span><span class=\"param\">\t<span class=\"n\">y_point</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Point of interest&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_direction</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_size</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">label_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">show_point</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">point_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">point_size</span><span class=\"o\">=</span><span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_dx</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_dy</span><span class=\"o\">=-</span><span class=\"mi\">45</span>,</span><span class=\"param\">\t<span class=\"n\">label_dx</span><span class=\"o\">=</span><span class=\"mi\">37</span>,</span><span class=\"param\">\t<span class=\"n\">label_dy</span><span class=\"o\">=-</span><span class=\"mi\">37</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.em_to_px", "modulename": "pynarrative", "qualname": "Story.em_to_px", "kind": "function", "doc": "<p>Converts a dimension from em to pixels.</p>\n\n<p>This function is essential for maintaining visual consistency\nbetween different textual elements and devices.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>em: Size in em</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Equivalent size in pixels (integer)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">em</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.create_title_layer", "modulename": "pynarrative", "qualname": "Story.create_title_layer", "kind": "function", "doc": "<p>Creates the title layer (and subtitle if present).</p>\n\n<p>This method is responsible for visually creating the main title\nand the optional subtitle of the graphic.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>Layer: Dictionary containing the title information</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Altair Chart object representing the title layer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.create_text_layer", "modulename": "pynarrative", "qualname": "Story.create_text_layer", "kind": "function", "doc": "<p>Creates a generic text layer (context, call-to-action, source).</p>\n\n<p>This method is used to create text layers for various narrative purposes,\nsuch as adding context, call-to-action or data source information.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>Layer: Dictionary containing the text information to be added</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Altair Chart object representing the text layer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.configure_view", "modulename": "pynarrative", "qualname": "Story.configure_view", "kind": "function", "doc": "<p>Configure aspects of the graph view using Altair's configure_view method.</p>\n\n<p>This method allows you to configure various aspects of the chart view, such as\nthe background colour, border style, internal spacing, etc.</p>\n\n<p>Parameters:\n<em>args, *</em>kwargs: Arguments to pass to the Altair configure_view method.</p>\n\n<p>stores the view configuration for application during rendering.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.Story.render", "modulename": "pynarrative", "qualname": "Story.render", "kind": "function", "doc": "<p>It renders all layers of the story in a single graphic.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story", "modulename": "pynarrative", "qualname": "story", "kind": "function", "doc": "<p>Utility function for creating a Story instance.</p>\n\n<p>This function simplifies the creation of a Story object, allowing\nto initialise it in a more concise and intuitive way.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data: DataFrame or URL for chart data (default: None)</li>\n<li>**kwargs: Additional parameters to be passed to the Story constructor</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>An instance of the Story class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.NextStep", "modulename": "pynarrative", "qualname": "NextStep", "kind": "class", "doc": "<p>Class for creating next-step elements in Story visualisations.\nIt supports three types of visualisation: button, line_steps and stair_steps.</p>\n\n<p>This class can be used either directly or via the\nparameters in the Story class:</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <h1 id=\"using-the-button\">Using the button</h1>\n      \n      <p>story.add_next_step(\n          ...     something=NextStep(\n          ...         type='button',\n          ...         text='Click me',\n          ...         url='https://example.com'\n          ...     )\n          ... )</p>\n\n<pre><code>&gt;&gt;&gt; # Using the stairs \n&gt;&gt;&gt; story.add_next_step(\n...     stairs=NextStep(\n...         type='stair_steps',\n...         texts=['Base', 'Intermedio', 'Avanzato']\n...     )\n... )\n\n&gt;&gt;&gt; # Using the line \n&gt;&gt;&gt; story.add_next_step(\n...     line=NextStep(\n...         type='line_steps',\n...         texts=['Step 1', 'Step 2', 'Step 3']\n...     )\n... )\n</code></pre>\n    </blockquote>\n  </blockquote>\n</blockquote>\n"}, {"fullname": "pynarrative.NextStep.__init__", "modulename": "pynarrative", "qualname": "NextStep.__init__", "kind": "function", "doc": "<p>Initialises a NextStep configuration.</p>\n\n<p>Args:\n    type (str):                             Display type (\u2018button\u2019, \u2018line_steps\u2019, \u2018stair_steps\u2019)\n    position (str, optional):               Position of the element. Default \u2018bottom\u2019\n    title (str, optional):                  Title of the visualisation. Default \u2018What can we do next?\u2019\n    texts (list, optional):                 List of texts for the steps. Default None\n    text (str, optional):                   Text for the button. Default None\n    url (str, optional):                    URL for the button. Default None\n    primary_color (str, optional):          Primary colour. Default \u2018#80C11E\u2019.\n    text_color (str, optional):             Text colour. Default \u2018black\u2019.\n    title_color (str, optional):            Title colour. Default \u2018black\u2019.\n    opacity (float, optional):              Opacity of the elements. Default 0.2\n    font_family (str, optional):            Primary font. Default \u2018Arial\u2019.\n    font_size (int, optional):              Primary font size. Default 14\n    title_font_size (int, optional):        Title font size. Default None\n    title_font_family (str, optional):      Title font. Default None\n    button_width (int, optional):           Button width. Default 120\n    button_height (int, optional):          Button height. Default 40\n    button_corner_radius (int, optional):   Button corner radius. Default 5\n    rect_width (int, optional):             Rectangle steps width. Default 10\n    rect_height (int, optional):            Height rectangles line_steps. Default 10\n    rect_space (int, optional):             Space between rectangle steps. Default 5\n    chart_width (int, optional):            Total chart width. Default 700\n    chart_height (int, optional):           Total chart height. Default 100\n    stair_height (int, optional):           Height of stair_steps. Default 3</p>\n\n<p>raises:\n    ValueError: If the type is invalid or if mandatory parameters are missing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bottom&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;What can we do next?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">texts</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">primary_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">text_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">opacity</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">font_family</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Arial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">title_font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_font_family</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>,</span><span class=\"param\">\t<span class=\"n\">button_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">button_corner_radius</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">rect_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">rect_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">rect_space</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">chart_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">700</span>,</span><span class=\"param\">\t<span class=\"n\">chart_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">stair_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span>)</span>"}, {"fullname": "pynarrative.NextStep.type", "modulename": "pynarrative", "qualname": "NextStep.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.position", "modulename": "pynarrative", "qualname": "NextStep.position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.title", "modulename": "pynarrative", "qualname": "NextStep.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.texts", "modulename": "pynarrative", "qualname": "NextStep.texts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.text", "modulename": "pynarrative", "qualname": "NextStep.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.url", "modulename": "pynarrative", "qualname": "NextStep.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.primary_color", "modulename": "pynarrative", "qualname": "NextStep.primary_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.text_color", "modulename": "pynarrative", "qualname": "NextStep.text_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.title_color", "modulename": "pynarrative", "qualname": "NextStep.title_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.opacity", "modulename": "pynarrative", "qualname": "NextStep.opacity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.font_family", "modulename": "pynarrative", "qualname": "NextStep.font_family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.font_size", "modulename": "pynarrative", "qualname": "NextStep.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.title_font_size", "modulename": "pynarrative", "qualname": "NextStep.title_font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.title_font_family", "modulename": "pynarrative", "qualname": "NextStep.title_font_family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.dimensions", "modulename": "pynarrative", "qualname": "NextStep.dimensions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.NextStep.validate_configuration", "modulename": "pynarrative", "qualname": "NextStep.validate_configuration", "kind": "function", "doc": "<p>Validates the configuration according to the selected type.</p>\n\n<p>Raises:\n    ValueError: If configuration is not valid for the selected type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.NextStep.to_dict", "modulename": "pynarrative", "qualname": "NextStep.to_dict", "kind": "function", "doc": "<p>Converts the configuration into a dictionary compatible with Story.add_next_step.</p>\n\n<p>Returns:\n    dict: Dictionary containing all parameters needed for the configuration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story", "modulename": "pynarrative.story", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story", "modulename": "pynarrative.story", "qualname": "Story", "kind": "class", "doc": "<p>Story class: Implements a structure for creating narrative views of data.</p>\n\n<p>This class extends the functionality of Altair to include narrative elements\nsuch as titles, contexts, call-to-action and annotations. It is designed to facilitate\nthe creation of more engaging and informative data visualisations.</p>\n"}, {"fullname": "pynarrative.story.Story.__init__", "modulename": "pynarrative.story", "qualname": "Story.__init__", "kind": "function", "doc": "<p>Initialise a Story object.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data: DataFrame or URL for graph data  (default: None)</li>\n<li>width: Graph width in pixels (default: 600)</li>\n<li>height: Height of the graph in pixels (default: 400)</li>\n<li>font: Font to be used for all text elements (default: 'Arial')</li>\n<li>base_font_size: Basic font size in pixels (default: 16)</li>\n<li>**kwargs: Additional parameters to be passed to the constructor of alt.Chart</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">600</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"o\">=</span><span class=\"s1\">&#39;Arial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">base_font_size</span><span class=\"o\">=</span><span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pynarrative.story.Story.chart", "modulename": "pynarrative.story", "qualname": "Story.chart", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.font", "modulename": "pynarrative.story", "qualname": "Story.font", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.base_font_size", "modulename": "pynarrative.story", "qualname": "Story.base_font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.story_layers", "modulename": "pynarrative.story", "qualname": "Story.story_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.font_sizes", "modulename": "pynarrative.story", "qualname": "Story.font_sizes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.colors", "modulename": "pynarrative.story", "qualname": "Story.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.config", "modulename": "pynarrative.story", "qualname": "Story.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pynarrative.story.Story.add_title", "modulename": "pynarrative.story", "qualname": "Story.add_title", "kind": "function", "doc": "<p>Adds a title layer (and optional subtitle) to the story.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>title: Main title text</li>\n<li>subtitle: Subtitle text (optional)</li>\n<li>title_color: Custom colour for the title (optional)</li>\n<li>subtitle_color: Custom colour for the subtitle (optional)</li>\n</ul>\n\n<p>returns:</p>\n\n<ul>\n<li>self, to allow method chaining</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">subtitle</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">title_color</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">subtitle_color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.add_context", "modulename": "pynarrative.story", "qualname": "Story.add_context", "kind": "function", "doc": "<p>Adds a context layer to the story.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>text: The context text to be added</li>\n<li>position: The position of the text (default: \u2018left\u2019)</li>\n<li>colour: Custom text colour (optional)</li>\n</ul>\n\n<p>returns:</p>\n\n<ul>\n<li>self, to allow method chaining</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.add_next_step", "modulename": "pynarrative.story", "qualname": "Story.add_next_step", "kind": "function", "doc": "<p>Adds a next-step element to the visualisation with multiple customisation options.\nSupports the use of NextStep with any parameter name via kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"o\">=</span><span class=\"s1\">&#39;bottom&#39;</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;What can we do next?&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">vers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stairs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_family</span><span class=\"o\">=</span><span class=\"s1\">&#39;Arial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">texts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button_width</span><span class=\"o\">=</span><span class=\"mi\">120</span>,</span><span class=\"param\">\t<span class=\"n\">button_height</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">button_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">button_opacity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">button_corner_radius</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">button_text_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">button_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">button_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_rect_width</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_rect_height</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_space</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_chart_width</span><span class=\"o\">=</span><span class=\"mi\">700</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_chart_height</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_opacity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_text_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_steps_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_rect_width</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_rect_height</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_chart_width</span><span class=\"o\">=</span><span class=\"mi\">700</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_chart_height</span><span class=\"o\">=</span><span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#80C11E&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_opacity</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_text_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stair_steps_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_font_family</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.add_annotation", "modulename": "pynarrative.story", "qualname": "Story.add_annotation", "kind": "function", "doc": "<p>Create an arrow annotation on the graph.</p>\n\n<p>This method is essential for highlighting specific points in the graph and adding\ncontextual explanations. It is particularly useful for data narration, allowing\nto guide the observer's attention to relevant aspects of the visualisation.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>x_point, y_point: Coordinates of the point to be annotated</li>\n<li>annotation_text: Text of the annotation (default: \u2018Point of interest\u2019)</li>\n<li>arrow_direction: Direction of the arrow (default: \u2018right\u2019)</li>\n<li>arrow_color, arrow_size: Arrow colour and size</li>\n<li>label_colour, label_size: Colour and size of the annotation text</li>\n<li>show_point: If True, shows a point at the annotation location</li>\n<li>point_color, point_size: Colour and size of the point</li>\n<li>arrow_dx, arrow_dy: Distances in pixels to be added to the arrow position (default:0, -45)</li>\n<li>label_dx, label_dy: Distances in pixels to be added to the label position (default:37, -37)</li>\n</ul>\n\n<p>returns:</p>\n\n<ul>\n<li>self, to allow method chaining</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_point</span>,</span><span class=\"param\">\t<span class=\"n\">y_point</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Point of interest&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_direction</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_size</span><span class=\"o\">=</span><span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">label_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">show_point</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">point_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;red&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">point_size</span><span class=\"o\">=</span><span class=\"mi\">60</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_dx</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">arrow_dy</span><span class=\"o\">=-</span><span class=\"mi\">45</span>,</span><span class=\"param\">\t<span class=\"n\">label_dx</span><span class=\"o\">=</span><span class=\"mi\">37</span>,</span><span class=\"param\">\t<span class=\"n\">label_dy</span><span class=\"o\">=-</span><span class=\"mi\">37</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.em_to_px", "modulename": "pynarrative.story", "qualname": "Story.em_to_px", "kind": "function", "doc": "<p>Converts a dimension from em to pixels.</p>\n\n<p>This function is essential for maintaining visual consistency\nbetween different textual elements and devices.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>em: Size in em</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Equivalent size in pixels (integer)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">em</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.create_title_layer", "modulename": "pynarrative.story", "qualname": "Story.create_title_layer", "kind": "function", "doc": "<p>Creates the title layer (and subtitle if present).</p>\n\n<p>This method is responsible for visually creating the main title\nand the optional subtitle of the graphic.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>Layer: Dictionary containing the title information</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Altair Chart object representing the title layer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.create_text_layer", "modulename": "pynarrative.story", "qualname": "Story.create_text_layer", "kind": "function", "doc": "<p>Creates a generic text layer (context, call-to-action, source).</p>\n\n<p>This method is used to create text layers for various narrative purposes,\nsuch as adding context, call-to-action or data source information.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>Layer: Dictionary containing the text information to be added</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Altair Chart object representing the text layer</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.configure_view", "modulename": "pynarrative.story", "qualname": "Story.configure_view", "kind": "function", "doc": "<p>Configure aspects of the graph view using Altair's configure_view method.</p>\n\n<p>This method allows you to configure various aspects of the chart view, such as\nthe background colour, border style, internal spacing, etc.</p>\n\n<p>Parameters:\n<em>args, *</em>kwargs: Arguments to pass to the Altair configure_view method.</p>\n\n<p>stores the view configuration for application during rendering.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.Story.render", "modulename": "pynarrative.story", "qualname": "Story.render", "kind": "function", "doc": "<p>It renders all layers of the story in a single graphic.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynarrative.story.story", "modulename": "pynarrative.story", "qualname": "story", "kind": "function", "doc": "<p>Utility function for creating a Story instance.</p>\n\n<p>This function simplifies the creation of a Story object, allowing\nto initialise it in a more concise and intuitive way.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data: DataFrame or URL for chart data (default: None)</li>\n<li>**kwargs: Additional parameters to be passed to the Story constructor</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>An instance of the Story class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();